// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain.go
//
// Generated by this command:
//
//	mockgen -typed -source=./domain.go -destination=../../test/mock_services_domain.go -package=test
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	domain "github.com/kl09/seed-farm/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBalancesRepository is a mock of BalancesRepository interface.
type MockBalancesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBalancesRepositoryMockRecorder
}

// MockBalancesRepositoryMockRecorder is the mock recorder for MockBalancesRepository.
type MockBalancesRepositoryMockRecorder struct {
	mock *MockBalancesRepository
}

// NewMockBalancesRepository creates a new mock instance.
func NewMockBalancesRepository(ctrl *gomock.Controller) *MockBalancesRepository {
	mock := &MockBalancesRepository{ctrl: ctrl}
	mock.recorder = &MockBalancesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalancesRepository) EXPECT() *MockBalancesRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockBalancesRepository) Exists(ctx context.Context, address string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, address)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockBalancesRepositoryMockRecorder) Exists(ctx, address any) *MockBalancesRepositoryExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockBalancesRepository)(nil).Exists), ctx, address)
	return &MockBalancesRepositoryExistsCall{Call: call}
}

// MockBalancesRepositoryExistsCall wrap *gomock.Call
type MockBalancesRepositoryExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBalancesRepositoryExistsCall) Return(exists bool, err error) *MockBalancesRepositoryExistsCall {
	c.Call = c.Call.Return(exists, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBalancesRepositoryExistsCall) Do(f func(context.Context, string) (bool, error)) *MockBalancesRepositoryExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBalancesRepositoryExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockBalancesRepositoryExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// WalletFound mocks base method.
func (m *MockNotifier) WalletFound(ctx context.Context, wallet domain.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletFound", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalletFound indicates an expected call of WalletFound.
func (mr *MockNotifierMockRecorder) WalletFound(ctx, wallet any) *MockNotifierWalletFoundCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletFound", reflect.TypeOf((*MockNotifier)(nil).WalletFound), ctx, wallet)
	return &MockNotifierWalletFoundCall{Call: call}
}

// MockNotifierWalletFoundCall wrap *gomock.Call
type MockNotifierWalletFoundCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotifierWalletFoundCall) Return(arg0 error) *MockNotifierWalletFoundCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotifierWalletFoundCall) Do(f func(context.Context, domain.Wallet) error) *MockNotifierWalletFoundCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotifierWalletFoundCall) DoAndReturn(f func(context.Context, domain.Wallet) error) *MockNotifierWalletFoundCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
